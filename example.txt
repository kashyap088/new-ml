reset;

option randseed'';

#############    Simulierte Daten    ##############

param B := 1000;										# Anzahl Beobachtungen

param price  {1..B} := round(Uniform(1,20),1);			# Angebotspreis

param C:=5;												# Anzahl Competitors

param comp   {1..B,c in 1..C}:= round(Uniform(1,20),1);	# Preise Competitors

param rank   {i in 1..B} := 1+card({c in 1..C:comp[i,c]<price[i]});  # Rang von price 

param y      {i in 1..B} := max(0,round(Uniform(0,1-0.3*rank[i]/(C+1)-0.05*price[i])));	# Ob verkauft oder nicht
	
	
#############    Regression    ##############

param M :=3;											# Anzahl erklaerende Variablen

param x {i in 1..B,m in 1..M} := if m=1 then 1          # erklaerende Variablen
                           else  if m=2 then rank[i] 
                           else  if m=3 then price[i] - min{c in 1..C} comp[i,c];
						   			  
var   beta {m in 1..M};	                                # zu schaetzende beta-Koeffizienten

var   P {i in 1..B} = exp(sum{m in 1..M} beta[m]*x[i,m])
                  /(1+exp(sum{m in 1..M} beta[m]*x[i,m]));  # logit W'keit

# logit Optimalitaetsbedingungen

subject to logMLE {m in 1..M}: sum{i in 1..B} ( y[i]- P[i] ) * x[i,m] = 0;


solve;

var LL  = sum{i in 1..B} ( y[i]*log(P[i]) + (1-y[i])*log(1-P[i]) );  # log-likelihood Funktion

var AIC = -2*LL +2*M;                                   # AIC

display beta,AIC;                                       # Ausgabe


#############    Optimierung    ##############

param b {i in 1..M}; for{i in 1..M} let b[i]:=beta[i];  # beta Koeffizienten fuer Nachfragew'keit

param p {c in 1..C} := round(Uniform(1,20),1);   # zufaellige Wettbewerbssituation

set A := 1..20 by 0.1;

param xx{m in 1..M,a in A} := if m=1 then 1      # Nachbau erklaerende Variablen
                        else  if m=2 then 1+card({c in 1..C:p[c]<a}) 
                        else  if m=3 then a - min{c in 1..C} p[c];

param pi{i in 0..1,a in A}:= if i=1 then exp(sum{m in 1..M} b[m]*xx[m,a])
                                     /(1+exp(sum{m in 1..M} b[m]*xx[m,a]))
							 else 1-pi[1,a];     # Preisabh. Verkaufsw'keit

param delta:= 0.99;          # discount factor

param L := 0.01;             # holding cost rate (per period and item)
param N := 15;               # initial inventory

param T := 100;              # number of iteration steps

                             # Value Function V
param V{t in 0..T,n in 0..N} := if t=T then 0 else if n=0 then 0 else

   max{a in A} sum{i in 0..1} pi[i,a]*(min(n,i)*a -n*L + delta * V[t+1,max(0,n-i)]);

   
param a_opt{n in 1..N} :=    # arg max von V(0,n)

   min{a in A: sum{i in 0..1} pi[i,a]*(min(n,i)*a -n*L + delta * V[1,max(0,n-i)])
             = V[0,n]} a;

param V_opt {n in 0..N} := V[0,n];


#############    Ausgabe    ##############

display p;

display V_opt, a_opt;















